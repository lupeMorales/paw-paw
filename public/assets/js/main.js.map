{"version":3,"sources":["game.js","main.js","maps.js"],"names":[],"mappingslSA;AACA;AACA;AACA;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"main.js","sourcesContent":["\"use strict\";\n\nconst canvas = document.querySelector(\".js-canvas\");\nconst game = canvas.getContext(\"2d\");\n\nconst btnUp = document.querySelector(\".item-up\");\nconst btnDown = document.querySelector(\".item-down\");\nconst btnRight = document.querySelector(\".item-right\");\nconst btnLeft = document.querySelector(\".item-left\");\n\nconst life = document.querySelector(\".js-life\");\nconst timer = document.querySelector(\".js-timer\");\nconst record = document.querySelector(\".js-record\");\n\nlet actualMapLevel;\n\nlet canvasSize;\nlet elementSize;\n\nlet level = 0;\nlet totalLifes = [\"‚ù§Ô∏è\", \"‚ù§Ô∏è\", \"‚ù§Ô∏è\"];\nlet time = \"00000\";\n\nconst messages = {\n  levelUp: `Well done!`,\n  gameOver: \"GAME OVER!\",\n  gameWin: \"you won!!!\",\n};\n\nconst playerPosition = {\n  x: undefined,\n  y: undefined,\n};\n\nconst bonePosition = {\n  x: undefined,\n  y: undefined,\n};\n\nlet collisionPositions = [];\n\nlet isWithinTheMargin = true;\n\n// SET SIZE\nfunction setCanvasSize() {\n  //game screen size\n  if (window.innerHeight > window.innerWidth) {\n    canvasSize = Math.floor(window.innerWidth * 0.75);\n  } else {\n    canvasSize = Math.floor(window.innerHeight * 0.75);\n  }\n\n  canvas.setAttribute(\"width\", canvasSize);\n  canvas.setAttribute(\"height\", canvasSize);\n\n  //elements size\n  elementSize = Math.floor(canvasSize / 10 - 0.4);\n  game.font = elementSize + \"px Verdana\";\n  game.textAlign = \"end\";\n  startGame();\n}\n\n// RENDER\n\nfunction renderLifes() {\n  life.innerHTML = \"\";\n  totalLifes.forEach((item) => (life.innerHTML += item));\n}\n\nfunction renderTime() {\n  const sum = () => time + 1;\n\n  timer.innerHTML = time;\n}\n\nfunction renderRecor() {\n  record.innerHTML = \"\";\n}\nfunction renderMapLevel(level) {\n  const mapLevel = maps[level].trim().split(\"\\n\");\n  // this is a bidimensional array\n  actualMapLevel = mapLevel.map((row) => row.trim().split(\"\"));\n\n  collisionPositions = [];\n  clearCanvas();\n  renderLifes();\n  setInterval(renderTime, 1);\n\n  actualMapLevel.forEach((row, indexRow) => {\n    row.forEach((column, indexColumn) => {\n      const emoji = emojis[column];\n      const positionX = elementSize * (indexColumn + 1);\n      const positionY = elementSize * (indexRow + 1);\n\n      //get player position\n      if (column == \"O\") {\n        if (!playerPosition.x && !playerPosition.y) {\n          playerPosition.x = positionX;\n          playerPosition.y = positionY;\n        }\n      } else if (column == \"I\") {\n        bonePosition.x = positionX;\n        bonePosition.y = positionY;\n      } else if (column == \"X\") {\n        collisionPositions.push({ x: positionX, y: positionY });\n      }\n      game.fillText(emoji, positionX, positionY);\n    });\n  });\n  renderPlayerPosition();\n\n  /*  game.fillText(emojis[\"PLAYER\"], playerPosition.x, playerPosition.y); */\n  /*   for (let i = 1; i <= 10; i++) {\n    for (let j = 1; j <= 10; j++) {\n      game.fillText(\n        emojis[actualMapLevel[j - 1][i - 1]],\n        elementSize * i,\n        elementSize * j\n      );\n    }\n  } */\n}\nfunction renderPlayerPosition() {\n  game.fillText(emojis[\"PLAYER\"], playerPosition.x, playerPosition.y);\n  validateCollisions();\n  getTheBone();\n}\n\n// MOVEMENT CONTROLS\nfunction moveUp() {\n  playerPosition.y -= elementSize;\n  if (withinTheMargin()) {\n    startGame();\n  } else {\n    playerPosition.y += elementSize;\n  }\n}\nfunction moveDown() {\n  playerPosition.y += elementSize;\n  if (withinTheMargin()) {\n    startGame();\n  } else {\n    playerPosition.y -= elementSize;\n  }\n}\nfunction moveLeft() {\n  playerPosition.x -= elementSize;\n  if (withinTheMargin()) {\n    startGame();\n  } else {\n    playerPosition.x += elementSize;\n  }\n}\nfunction moveRight() {\n  playerPosition.x += elementSize;\n  if (withinTheMargin()) {\n    startGame();\n  } else {\n    playerPosition.x -= elementSize;\n  }\n}\nfunction moveByKeys(ev) {\n  if (ev.key == \"ArrowUp\") moveUp();\n  else if (ev.key == \"ArrowDown\") moveDown();\n  else if (ev.key == \"ArrowLeft\") moveLeft();\n  else if (ev.key == \"ArrowRight\") moveRight();\n}\n\n//VALIDATIONS\n\nfunction validateCollisions() {\n  const collision = collisionPositions.find((enemy) => {\n    const collisionX = enemy.x.toFixed(3) == playerPosition.x.toFixed(3);\n    const collisionY = enemy.y.toFixed(3) == playerPosition.y.toFixed(3);\n    return collisionX && collisionY;\n  });\n\n  if (collision) {\n    game.fillText(emojis[\"BOMB_COLLISION\"], playerPosition.x, playerPosition.y);\n    totalLifes.length > 0 ? crashOver() : gameOver();\n  }\n  console.log({ playerPosition, collision });\n}\n\nfunction getTheBone() {\n  if (JSON.stringify(bonePosition) === JSON.stringify(playerPosition)) {\n    console.log(\"congrats!!\");\n    /*  clearCanvas();\n    for (let i = 1; i <= 10; i++) {\n      for (let j = 1; j <= 10; j++) {\n        game.fillText(emojis[\"I\"], elementSize * i, elementSize * j);\n      }\n    } */\n    // unos segundos despues que haga esto\n\n    validateLastLevel(level);\n  }\n}\nfunction withinTheMargin() {\n  if (\n    playerPosition.x >= elementSize &&\n    playerPosition.x <= canvasSize &&\n    playerPosition.y >= elementSize &&\n    playerPosition.y <= canvasSize\n  ) {\n    return true;\n  }\n}\nfunction validateLastLevel(actualLevel) {\n  actualLevel < maps.length - 1 ? levelUp() : winGame();\n}\n\nfunction clearCanvas() {\n  game.clearRect(0, 0, canvasSize, canvasSize);\n}\n\nfunction renderMessage(message) {\n  game.font = elementSize + \"px Cherry Bomb One\";\n  game.fontWeight = \"bold\";\n  game.fillStyle = \"#c27434\";\n  game.textAlign = \"center\";\n  game.fillText(message, canvasSize / 2, canvasSize / 2);\n}\nfunction crashOver() {\n  console.log(\"CRASH!\");\n\n  loseLife();\n  playerPosition.x = undefined;\n  playerPosition.y = undefined;\n\n  setTimeout(startGame, 1000);\n}\n\nfunction reset() {\n  playerPosition.x = undefined;\n  playerPosition.y = undefined;\n  level = 0;\n  totalLifes = [\"‚ù§Ô∏è\", \"‚ù§Ô∏è\", \"‚ù§Ô∏è\"];\n}\nfunction loseLife() {\n  /*  totalLifes--; */\n  totalLifes.pop();\n  console.log(totalLifes);\n  renderLifes();\n}\nfunction startGame() {\n  renderMapLevel(level);\n}\nfunction gameOver() {\n  console.log(\"GAME OVER\");\n\n  clearCanvas();\n  renderMessage(messages.gameOver);\n  /* setTimeout(startGame, 1000); */\n}\nfunction levelUp() {\n  level++;\n  console.log({ level });\n  clearCanvas();\n  renderMessage(messages.levelUp);\n  setTimeout(setCanvasSize, 1000);\n}\nfunction winGame() {\n  console.log(\"no mas mapas\");\n  clearCanvas();\n  for (let i = 1; i <= 10; i++) {\n    for (let j = 1; j <= 10; j++) {\n      game.fillText(emojis[\"I\"], elementSize * i, elementSize * j);\n    }\n  }\n  renderMessage(messages.gameWin);\n  // to do: showMessage?? or recharge initial level\n  const jsConfetti = new JSConfetti();\n\n  jsConfetti.addConfetti({\n    emojis: [\"ü¶¥\", \"üê∂\", \"‚ú®\", \"üèÜ\"],\n    confettiRadius: 6,\n    confettiNumber: 50,\n  });\n}\n// events\n\nwindow.addEventListener(\"load\", setCanvasSize);\nwindow.addEventListener(\"resize\", setCanvasSize);\nwindow.addEventListener(\"keydown\", moveByKeys);\n\nbtnUp.addEventListener(\"click\", moveUp);\nbtnDown.addEventListener(\"click\", moveDown);\nbtnRight.addEventListener(\"click\", moveRight);\nbtnLeft.addEventListener(\"click\", moveLeft);\n","'use strict';\n\nconsole.log('>> Ready :)');\n","\"use strict\";\nconst emojis = {\n  \"-\": \" \",\n  O: \"üè†\",\n  X: \"üå≥\",\n  I: \"ü¶¥\",\n  PLAYER: \"üê∂\",\n  BOMB_COLLISION: \"üí•\",\n  GAME_OVER: \"üëé\",\n  WIN: \"üèÜ\",\n};\nconst maps = [];\nmaps.push(`\n    IXXXXXXXXX\n    -XXXXXXXXX\n    -XXXXXXXXX\n    -XXXXXXXXX\n    -XXXXXXXXX\n    -XXXXXXXXX\n    -XXXXXXXXX\n    -XXXXXXXXX\n    -XXXXXXXXX\n    OXXXXXXXXX\n  `);\nmaps.push(`\n    O--XXXXXXX\n    X--XXXXXXX\n    XX----XXXX\n    X--XX-XXXX\n    X-XXX--XXX\n    X-XXXX-XXX\n    XX--XX--XX\n    XX--XXX-XX\n    XXXX---IXX\n    XXXXXXXXXX\n    `);\n/* maps.push(`\n    I-----XXXX\n    XXXXX-XXXX\n    XX----XXXX\n    XX-XXXXXXX\n    XX-----XXX\n    XXXXXX-XXX\n    XX-----XXX\n    XX-XXXXXXX\n    XX-----OXX\n    XXXXXXXXXX\n  `);\nmaps.push(`\n  O---XXXXXX\n  XXX-XXXXXX\n  XXX-XXXXIX\n  XXX-XXXX-X\n  XXX---XX-X\n  XX--X-XX-X\n  XX--X-XX-X\n  XX--XXXX-X\n  XX-------X\n  XXXXXXXXXX\n`); */\n"]}